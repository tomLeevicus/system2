// 前向声明所有模块
@forward './variables';
@forward './mixins';
@forward './transitions';
@forward './element-ui';
@forward './workflow';

// 导入所需的 Sass 模块
@use 'sass:math';
@use 'sass:map';
@use 'sass:color';
@use 'sass:string';
@use 'sass:list';

// 导出公共变量和函数
@function strip-unit($value) {
  @return math.div($value, ($value * 0 + 1));
}

@function rem($value) {
  $remValue: math.div(strip-unit($value), 16);
  @return #{$remValue}rem;
}

@function em($value, $context: 16px) {
  $emValue: math.div(strip-unit($value), strip-unit($context));
  @return #{$emValue}em;
}

// 导出公共混入
@mixin respond-to($breakpoint) {
  @if map.has-key($breakpoints, $breakpoint) {
    @media screen and (min-width: map.get($breakpoints, $breakpoint)) {
      @content;
    }
  }
}

@mixin flex($direction: row, $justify: flex-start, $align: stretch, $wrap: nowrap) {
  display: flex;
  flex-direction: $direction;
  justify-content: $justify;
  align-items: $align;
  flex-wrap: $wrap;
}

@mixin position($position, $args) {
  @each $o in top right bottom left {
    $i: list.index($args, $o);
    @if $i and $i + 1 <= list.length($args) and list.nth($args, $i + 1) {
      #{$o}: list.nth($args, $i + 1);
    }
  }
  position: $position;
}

// 断点映射
$breakpoints: (
  'sm': 576px,
  'md': 768px,
  'lg': 992px,
  'xl': 1200px,
  'xxl': 1400px
); 